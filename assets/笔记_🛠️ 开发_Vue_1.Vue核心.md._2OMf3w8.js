import{_ as k,c as d,J as i,m as s,a as n,t as r,V as t,o,E as a}from"./chunks/framework.WH0rnJL5.js";const B="/assets/54b95a28a9ccaeda7a895cfce079d141.UMlMXtB4.png",c="/assets/31eb88cc2c4475bde701dc472469c05c_720.tylM41_v.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/🛠️ 开发/Vue/1.Vue核心.md","filePath":"笔记/🛠️ 开发/Vue/1.Vue核心.md"}'),g={name:"笔记/🛠️ 开发/Vue/1.Vue核心.md"},y=t(`<h2 id="_1-开发环境" tabindex="-1">1.开发环境 <a class="header-anchor" href="#_1-开发环境" aria-label="Permalink to &quot;1.开发环境&quot;">​</a></h2><h2 id="_2-小案例" tabindex="-1">2.小案例 <a class="header-anchor" href="#_2-小案例" aria-label="Permalink to &quot;2.小案例&quot;">​</a></h2><p>1.阻止vue在启动时生成生产提示</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span></span></code></pre></div><p>2.使用Vue的话，必须创建Vue实例，且传入一个配置对象，如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      	el</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;#root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//用于指定当前生成的Vue实例绑定在哪个容器上。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">          ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>如上代码所示，必须有存在一个id指定为root(也可以是其它名称)的div容器,代码形式依然符合HTML规范，但可以引入一些Vue的语法（数据绑定等）。</p><p>3.容器与实例之间是一一对应的，重复定义无效。</p><h2 id="_2-模板语法" tabindex="-1">2.模板语法 <a class="header-anchor" href="#_2-模板语法" aria-label="Permalink to &quot;2.模板语法&quot;">​</a></h2><h3 id="_2-1-插值语法" tabindex="-1">2.1 插值语法 <a class="header-anchor" href="#_2-1-插值语法" aria-label="Permalink to &quot;2.1 插值语法&quot;">​</a></h3><p>功能：用于解析标签体内容</p>`,11),E=t(`<h3 id="_2-2-指令语法" tabindex="-1">2.2 指令语法 <a class="header-anchor" href="#_2-2-指令语法" aria-label="Permalink to &quot;2.2 指令语法&quot;">​</a></h3><p>功能：用于解析标签(包括：标签属性、标签体内容、绑定事件等)</p><p>语法：</p><p>​ 1.<code>v-bind:href=&#39;xxx&#39;</code></p><p>​ 2.<code>:href=&#39;xxx&#39;</code>(简写形式)</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> v-bind:href</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;点我xxx&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> :href</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;点我xxx&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>其中xxx也是写js表达式且可以直接读取到data中的所有属性。Vue中有需要指令，形式都为:v-???。</p><h3 id="_2-3-data属性" tabindex="-1">2.3 data属性 <a class="header-anchor" href="#_2-3-data属性" aria-label="Permalink to &quot;2.3 data属性&quot;">​</a></h3><p>如果出现值定义的name重复情况，那可以再创建一个属性的形式,如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">data:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	name:&#39;Vue&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	school:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">		name: &#39;Note&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_3-数据绑定" tabindex="-1">3.数据绑定 <a class="header-anchor" href="#_3-数据绑定" aria-label="Permalink to &quot;3.数据绑定&quot;">​</a></h2><h3 id="_3-1-单向数据绑定" tabindex="-1">3.1 单向数据绑定 <a class="header-anchor" href="#_3-1-单向数据绑定" aria-label="Permalink to &quot;3.1 单向数据绑定&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">单向数据绑定: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> v-bind:value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre></div><p>数据只能从data流向页面。</p><h3 id="_3-2-双向数据绑定" tabindex="-1">3.2 双向数据绑定 <a class="header-anchor" href="#_3-2-双向数据绑定" aria-label="Permalink to &quot;3.2 双向数据绑定&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>双向数据绑定: &lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;/&gt;</span></span></code></pre></div><p><code>v-model</code>：只能用于输入类元素（多选、单选、输入框）属性上，在页面中修改数据后，属性值也会相应修改。</p><p><code>v-model:value</code>可以简写为<code>v-model</code>，由于<code>v-model</code>默认收集的就是value值。</p><h2 id="_4-el与data的两种写法" tabindex="-1">4.el与data的两种写法 <a class="header-anchor" href="#_4-el与data的两种写法" aria-label="Permalink to &quot;4.el与data的两种写法&quot;">​</a></h2><h3 id="_4-1-实例绑定容器写法" tabindex="-1">4.1 实例绑定容器写法 <a class="header-anchor" href="#_4-1-实例绑定容器写法" aria-label="Permalink to &quot;4.1 实例绑定容器写法&quot;">​</a></h3><p>1.<code>el: &#39;#root&#39;</code></p><p>2.<code>v.$mount(&#39;#root&#39;)</code> 将数据挂载到容器中</p><h3 id="_4-2-数据的两种声明方式" tabindex="-1">4.2 数据的两种声明方式 <a class="header-anchor" href="#_4-2-数据的两种声明方式" aria-label="Permalink to &quot;4.2 数据的两种声明方式&quot;">​</a></h3><p>1.<strong>data属性直接赋值</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">data:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	name: &quot;xxxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>2.<strong>函数式</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">data: function(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  console.log(&#39;@@@&#39;,this);//this是Vue实例对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  return {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        name: &#39;Vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}//在后续会用得多</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">======================</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">data: ()=&gt;{ //不要用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	console.log(&#39;@@@&#39;,this);//this为window</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="_5-mvvm模型" tabindex="-1">5.MVVM模型 <a class="header-anchor" href="#_5-mvvm模型" aria-label="Permalink to &quot;5.MVVM模型&quot;">​</a></h2><ul><li>MVVM模型 <ul><li>M:模型(Model) <ul><li>对应data中的数据</li></ul></li><li>V:视图(View) <ul><li>模板</li></ul></li><li>VM:视图模型(ViewModel) <ul><li>Vue实例对象</li></ul></li></ul></li></ul><p><img src="`+B+`" alt="54b95a28a9ccaeda7a895cfce079d141"></p><p>总的来说就是：数据通过vue传递到view中并通过渲染显示给用户。</p><h2 id="_6-数据代理" tabindex="-1">6.数据代理 <a class="header-anchor" href="#_6-数据代理" aria-label="Permalink to &quot;6.数据代理&quot;">​</a></h2><h3 id="_6-1-object-defineproperty" tabindex="-1">6.1 Object.defineproperty() <a class="header-anchor" href="#_6-1-object-defineproperty" aria-label="Permalink to &quot;6.1 Object.defineproperty()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">	sex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Man&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  enumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//控制属性是否可以枚举，默认为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  writable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 控制属性是否可以被修改，默认为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  configurable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //控制属性是否可以被删除，默认为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><p>通过它定义的属性是无法被遍历(枚举)到的,例如：<code>Object.keys(person)</code>获取的结果为<code>[&#39;name&#39;,&#39;sex&#39;]</code>. 同时上述列举了几个重要的配置，通过它们可以控制该属性的某一些特性。</p><p>主要的特性在于，该函数是具有<code>getter</code>与<code>setter</code>特性的使用，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;修改number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        number</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><p>当我们调用<code>person.age = 80</code>进行赋值的时候就会调用到<code>set</code>方法,同样的<code>get</code>方法同理.</p><h3 id="_6-2-何为数据代理" tabindex="-1">6.2 何为数据代理？ <a class="header-anchor" href="#_6-2-何为数据代理" aria-label="Permalink to &quot;6.2 何为数据代理？&quot;">​</a></h3><p><strong>数据代理:通过一个对象代理对另一个对象中属性的操作。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">obj2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">	get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><h3 id="_6-3-vue中的数据代理" tabindex="-1">6.3 Vue中的数据代理 <a class="header-anchor" href="#_6-3-vue中的数据代理" aria-label="Permalink to &quot;6.3 Vue中的数据代理&quot;">​</a></h3><p><img src="`+c+'" alt="31eb88cc2c4475bde701dc472469c05c_720"></p><ol><li>Vue中的数据代理 <ul><li>通过VM对象来代理data对象中属性的操作(读/写)</li></ul></li><li>Vue中数据代理的好处 <ul><li>更加方便的操作data中的数据</li></ul></li><li>基本原理 <ul><li>通过<code>Object.defineProperty()</code>把data对象中所有属性添加在vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter/setter</li><li>在getter/setter内部去操作(读/写)data中对应的属性。<code>vm._data == options.data = data</code></li></ul></li></ol><h2 id="_7-数据处理" tabindex="-1">7.数据处理 <a class="header-anchor" href="#_7-数据处理" aria-label="Permalink to &quot;7.数据处理&quot;">​</a></h2><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>',46),u=s("h2",{id:"文件历史",tabindex:"-1"},[n("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function A(l,F,C,b,m,v){const e=a("NolebasePageProperties"),h=a("NolebaseGitContributors"),p=a("NolebaseGitChangelog");return o(),d("div",null,[i(e),y,s("p",null,[n("写法:"),s("code",null,r(l.xxx),1),n("，其中括号里的内容是js表达式，能够直接读取到data的所有属性")]),E,i(h),u,i(p)])}const x=k(g,[["render",A]]);export{f as __pageData,x as default};
