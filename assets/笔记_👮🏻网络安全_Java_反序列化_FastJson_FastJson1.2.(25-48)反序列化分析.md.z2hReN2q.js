import{_ as l,c as o,J as s,m as a,a as e,V as r,o as p,E as i}from"./chunks/framework.WH0rnJL5.js";const d="/assets/image-20240416203715834.-XkYbR6z.png",k="/assets/image-20240416204520252.EhqUPPiL.png",f=JSON.parse('{"title":"FastJson1.2.25-1.2.48 反序列化分析","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/👮🏻网络安全/Java/反序列化/FastJson/FastJson1.2.(25-48)反序列化分析.md","filePath":"笔记/👮🏻网络安全/Java/反序列化/FastJson/FastJson1.2.(25-48)反序列化分析.md"}'),c={name:"笔记/👮🏻网络安全/Java/反序列化/FastJson/FastJson1.2.(25-48)反序列化分析.md"},g=a("h1",{id:"fastjson1-2-25-1-2-48-反序列化分析",tabindex:"-1"},[e("FastJson1.2.25-1.2.48 反序列化分析 "),a("a",{class:"header-anchor",href:"#fastjson1-2-25-1-2-48-反序列化分析","aria-label":'Permalink to "FastJson1.2.25-1.2.48 反序列化分析"'},"​")],-1),u=r(`<h2 id="_1-漏洞原理" tabindex="-1">1.漏洞原理 <a class="header-anchor" href="#_1-漏洞原理" aria-label="Permalink to &quot;1.漏洞原理&quot;">​</a></h2><p>由于自FastJson1.2.25版本之后，FastJson增加了黑白名单机制，如果想执行原来的利用链已经不行了，只能思考其它的方式。</p><h2 id="_2-漏洞分析" tabindex="-1">2.漏洞分析 <a class="header-anchor" href="#_2-漏洞分析" aria-label="Permalink to &quot;2.漏洞分析&quot;">​</a></h2><h3 id="_2-1-环境配置" tabindex="-1">2.1 环境配置 <a class="header-anchor" href="#_2-1-环境配置" aria-label="Permalink to &quot;2.1 环境配置&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;fastjson&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.2.25&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h3 id="_2-2-限制分析" tabindex="-1">2.2 限制分析 <a class="header-anchor" href="#_2-2-限制分析" aria-label="Permalink to &quot;2.2 限制分析&quot;">​</a></h3><p>当依赖版本为1.2.25及以上的时候，由于增加了白名单机制，原来的<code>Templates</code>类利用方式被限制了，只能寻找其它方式。在<code>ParserConfig#checkAutoType()</code>如下图</p><img src="`+d+'" alt="image-20240416203715834" style="width:700px;text-align:center;"><p>在上图中，存在一个字段<code>autoTypeSupport</code>，通过它来检查是否进行黑名单判断。那如果当启动该配置之后，是什么情况？</p><p>答案是会先进入白名单判断的逻辑，如下图：(有的文章写这是一种黑名单绕过方式？)</p><img src="'+k+'" alt="image-20240416204520252" style="width:700px;text-align:center;"><p>代码配置如下(这也就是为什么有些文章在调试的时候需要开启AutoTypeSupport)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ParserConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getGlobalInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAutoTypeSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ParserConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getGlobalInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addAccept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;com.sun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><h3 id="_2-3-绕过分析" tabindex="-1">2.3 绕过分析 <a class="header-anchor" href="#_2-3-绕过分析" aria-label="Permalink to &quot;2.3 绕过分析&quot;">​</a></h3><h4 id="_1-l-、-绕过" tabindex="-1">(1) <code>L 、;</code>绕过 <a class="header-anchor" href="#_1-l-、-绕过" aria-label="Permalink to &quot;(1) `L 、;`绕过&quot;">​</a></h4><h5 id="影响版本" tabindex="-1">影响版本 <a class="header-anchor" href="#影响版本" aria-label="Permalink to &quot;影响版本&quot;">​</a></h5><h5 id="绕过分析" tabindex="-1">绕过分析 <a class="header-anchor" href="#绕过分析" aria-label="Permalink to &quot;绕过分析&quot;">​</a></h5><h4 id="_2-双写l-、-绕过-开启autotype" tabindex="-1">(2) 双写<code>L 、 ;</code>绕过(开启autoType) <a class="header-anchor" href="#_2-双写l-、-绕过-开启autotype" aria-label="Permalink to &quot;(2) 双写`L 、 ;`绕过(开启autoType)&quot;">​</a></h4><h5 id="影响版本-1" tabindex="-1">影响版本 <a class="header-anchor" href="#影响版本-1" aria-label="Permalink to &quot;影响版本&quot;">​</a></h5><h5 id="绕过分析-1" tabindex="-1">绕过分析 <a class="header-anchor" href="#绕过分析-1" aria-label="Permalink to &quot;绕过分析&quot;">​</a></h5><h4 id="_3-绕过-开启autotype" tabindex="-1">(3) <code>[</code>绕过(开启autoType) <a class="header-anchor" href="#_3-绕过-开启autotype" aria-label="Permalink to &quot;(3) `[`绕过(开启autoType)&quot;">​</a></h4><h5 id="影响版本-2" tabindex="-1">影响版本 <a class="header-anchor" href="#影响版本-2" aria-label="Permalink to &quot;影响版本&quot;">​</a></h5><h5 id="绕过分析-2" tabindex="-1">绕过分析 <a class="header-anchor" href="#绕过分析-2" aria-label="Permalink to &quot;绕过分析&quot;">​</a></h5><h4 id="_4-内置json" tabindex="-1">(4)内置JSON <a class="header-anchor" href="#_4-内置json" aria-label="Permalink to &quot;(4)内置JSON&quot;">​</a></h4><h5 id="影响版本-3" tabindex="-1">影响版本 <a class="header-anchor" href="#影响版本-3" aria-label="Permalink to &quot;影响版本&quot;">​</a></h5><h5 id="绕过分析-3" tabindex="-1">绕过分析 <a class="header-anchor" href="#绕过分析-3" aria-label="Permalink to &quot;绕过分析&quot;">​</a></h5><h3 id="_2-4-mappings缓存" tabindex="-1">2.4 mappings缓存 <a class="header-anchor" href="#_2-4-mappings缓存" aria-label="Permalink to &quot;2.4 mappings缓存&quot;">​</a></h3><h4 id="_1-漏洞分析" tabindex="-1">(1) 漏洞分析 <a class="header-anchor" href="#_1-漏洞分析" aria-label="Permalink to &quot;(1) 漏洞分析&quot;">​</a></h4><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>',29),_=a("h2",{id:"文件历史",tabindex:"-1"},[e("文件历史 "),a("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function B(b,m,y,F,q,A){const t=i("NolebasePageProperties"),n=i("NolebaseGitContributors"),h=i("NolebaseGitChangelog");return p(),o("div",null,[g,s(t),u,s(n),_,s(h)])}const P=l(c,[["render",B]]);export{f as __pageData,P as default};
